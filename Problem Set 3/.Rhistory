library(nycflights13)
library(tidyverse)
install.packages("nycflights13")
library(nycflights13)
print(nycflights13::flights)
filter(flights,month==1, day ==1)
filter(flights,month18, day 11)
filter(flights, month ==8, day ==11)
?nycflights13
filter(flights,arr_delay > 120 | dep_delay >120)
nycflights13::airlines
nycflights13::airports
?flights
filter(flights, origin == "IAH" | origin == "HOU")
library(nycflights13)
filter(flights, origin == "IAH" | origin == "HOU")
filter(flights, dest == "IAH" | dest == "HOU")
nyflights13::dest
?flights
?nycflights13
library(nycflights13)
?dest
dest::
nycflights13::deest
nycflights13::dest
nycflights13::airports
nycflights13::dest
ncyflights13
filter(flights, airlines == UA & airlines == DL and airlines == AA)
filter(flights, airlines == UA & airlines == DL & airlines == AA)
filter(flights, airlines == UA & airlines == DL & airlines == AA)
library(nycflights13)
library(tidyverse)
filter(flights, airlines == UA & airlines == DL & airlines == AA)
rlang::last_error()
nycflights13::airlines
filter(flights, airlines == "UA" & airlines == "DL" & airlines == "AA")
rlang::last_error()
filter(flights, airlines == "UA")
filter(flights, month ==1, day == 1)
filter(flights, carrier == UA)
filter(flights, carrier "UA")
filter(flights, carrier == "UA")
filter(flights, carrier == "UA" & carrier == "DL" & carrier (AA))
filter(flights, carrier == "UA" & carrier == "DL" & carrier == "AA")
filter(flights, carrier == "UA" | carrier == "DL" | carrier == "AA")
filter(flights, dest == "IAD" | dest=="HOU")
filter(flights, dest == "IAD" | dest=="HOU")
filter(flights, dest == "IAD" | dest=="HOU")
filter(flights, month == 7 | month == 8 | month == 9)
filter(flights, dep_delay <= 0 & arr_delay > 0)
filter(flights, dep_delay <= 0 & arr_delay > 120)
filter(flights, month == 8 & day == 11 & origin == "CVG")
filter(flights, origin == "CVG")
filter(flights, origin == "ORD")
filairports
airports
filter(airports, "CVG")
filter(flights, dest == "CLE")
filter(flights, dest == "CVG")
filter fligts, origin == "CVG")
filter(flights, origin == "CVG")
filter (flights, between(month, 7, 9))
is.na(dep_time)
arrange(flights, year, month, day)
arrange(flights, desc(dep_delay))
arrange(flights, air_time)
arrange(flights, distance)
arrange(flights, desc(distance))
view()
view(flights)
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
#> # A tibble: 336,776 x 9
#>    year month   day dep_delay arr_delay distance air_time  gain speed
#>   <int> <int> <int>     <dbl>     <dbl>    <dbl>    <dbl> <dbl> <dbl>
#> 1  2013     1     1         2        11     1400      227    -9  370.
#> 2  2013     1     1         4        20     1416      227   -16  374.
#> 3  2013     1     1         2        33     1089      160   -31  408.
#> 4  2013     1     1        -1       -18     1576      183    17  517.
#> 5  2013     1     1        -6       -25      762      116    19  394.
#> 6  2013     1     1        -4        12      719      150   -16  288.
#> # â€¦ with 336,770 more rows
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
flights
flights_test <-(select(flights, dep_time, sched_dep_time))
flights_test
mutate(flights_test, dep_time_min = dep_time %/% 100 * 60 + dep_time %% 100)
flights_test <- (select, air_time, dep_time, arr_time)
flights_test <- select(flights, air_time, dep_time, arr_time)
flights_test
mutate(flights_test, taxi_time = (arr_time  %/% 100 * 60 + arr_time %% 100) - (dep_time %/% 100 * 60 + dep_time %% 100) - air time
mutate(flights_test, taxi_time = (arr_time  %/% 100 * 60 + arr_time %% 100) - (dep_time %/% 100 * 60 + dep_time %% 100) - air time)
mutate(flights_test, taxi_time = (arr_time  %/% 100 * 60 + arr_time %% 100) - (dep_time %/% 100 * 60 + dep_time %% 100) - air_time)
mutate(flights_test, taxi_time = ((arr_time  %/% 100 * 60 + arr_time %% 100) - (dep_time %/% 100 * 60 + dep_time %% 100)) - air_time)
summarize(flights, delay = mean(dep_delay, na.rm = TRUE))
source('~/.active-rstudio-document', echo=TRUE)
getwd()
library(tidyverse)
?diamonds
dimonds
diamonds
Read in Percentage of Engineering Degrees from .csv files
all_degrees <- read.csv("HE_Institutions.csv", header = TRUE)
#Rename first column to match with Teachers.
names(all_degrees)[1] <- "div_name"
#Isolate the 2-year and 4-year columns and convert to percentage
egr_degrees <- all_degrees %>%
select("div_name", "X.EngTot2yr", "X.EngTot4yr" ) %>%
transform(X.EngTot2yr = X.EngTot2yr * 100) %>%
transform(X.EngTot4yr = X.EngTot4yr * 100)
#Create a histogram for 2Y Engineering
hist_2y<- ggplot(egr_degrees, aes (X.EngTot2yr))+ theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(title = "Histogram of 2 Year Engineering Degrees", x = "Percentange of 2 Year Engineering Degrees", y = "Density")
hist_2y
hist_2y +
stat_function(fun = dnorm, args = list(mean = mean(egr_degrees$X.EngTot2yr, na.rm = TRUE), sd = sd(egr_degrees$X.EngTot2yr, na.rm = TRUE)), color = "black", size = 1)
#Descriptive Statistics for 2Y Engineering
round(stat.desc(egr_degrees$X.EngTot2yr, basic = FALSE, norm = TRUE), digits = 3)
#Q-QPlot of 2Year
qqplot.2Yegr_degrees<- qplot(sample = egr_degrees$X.EngTot2yr, stat="qq")
qqplot.2Yegr_degrees+ labs(title = "QQPlot for 2 Year Engineering Degrees", x = "Thoeretical", y = "Sample")
#Shapiro-Wilk Test 2 Year
shapiro.test(egr_degrees$X.EngTot2yr)
#Create a histogram for 4Y Engineering
hist_4y<- ggplot(egr_degrees, aes (X.EngTot4yr))+ theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(title = "Histogram of 4 Year Engineering Degrees", x = "Percentange of 4 Year Engineering Degrees", y = "Density")
hist_4y
hist_4y +
stat_function(fun = dnorm, args = list(mean = mean(egr_degrees$X.EngTot4yr, na.rm = TRUE), sd = sd(egr_degrees$X.EngTot4yr, na.rm = TRUE)), color = "black", size = 1)
#Descriptive Statistics for 4Y Engineering
round(stat.desc(egr_degrees$X.EngTot4yr, basic = FALSE, norm = TRUE), digits = 3)
#Q-QPlot of 4Year
qqplot.4Yegr_degrees<- qplot(sample = egr_degrees$X.EngTot4yr, stat="qq")
qqplot.4Yegr_degrees+ labs(title = "QQPlot for 4 Year Engineering Degrees", x = "Thoeretical", y = "Sample")
#Shapiro-Wilk Test 4 Year
shapiro.test(egr_degrees$X.EngTot4yr)
library(car)
library(ggplot2)
library(pastecs)
library(psych)
library(Rcmdr)
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(clinfun)
library(ggplot2)
library(pastecs)
library(pgirmess)
install.packages("pgirmess")
setwd("C:/Users/Amy Richardson/Dropbox/VT - PhD/ENGE 5714 - Quant/R Practice/ENGE5714/Week 10")
library(car)
library(clinfun)
library(ggplot2)
library(pastecs)
library(pgirmess)
library(pgirmess)
drugData<-read.delim("Drug.dat", header = TRUE)
View(drugData)
by(drugData[,c(2:3)], drugData$drug, stat.desc, basic=FALSE, norm=TRUE)
leveneTest(drugData$sundayBDI, drugData$drug, center = "mean")
leveneTest(drugData$wedsBDI, drugData$drug, center = "mean")
sunModel<-wilcox.test(sundayBDI ~ drug, data = drugData)
sunModel
wedModel<-wilcox.test(wedsBDI ~ drug, data = drugData)
wedModel
sunModel<-wilcox.test(sundayBDI ~ drug, data = drugData, exact = FALSE, correct= FALSE)
sunModel
wedModel<-wilcox.test(wedsBDI ~ drug, data = drugData, exact = FALSE, correct= FALSE)
wedModel
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p.value/2)
r<- z/ sqrt(N)
cat(wilcoxModel$data.name, "Effect Size, r = ", r)
}
rFromWilcox(sunModel, 20)
rFromWilcox(wedModel, 20)
rFromWilcox(sunModel, 20)
rFromWilcox(wedModel, 20)
rFromWilcox(sunModel, 20)
rFromWilcox(wedModel, 20)
rFromWilcox(sunModel, 20)
rFromWilcox(wedModel, 20)
rFromWilcox(sunModel, 20)
rFromWilcox(wedModel, 20)
drugData$BDIchange<-drugData$wedsBDI-drugData$sundayBDI
by(drugData$BDIchange, drugData$drug, stat.desc, basic = FALSE, norm = TRUE)
boxplot<-ggplot(drugData, aes(drug, BDIchange)) + geom_boxplot()
boxplot
alcoholData<-subset(drugData, drug == "Alcohol")
ecstasyData<-subset(drugData, drug == "Ecstasy")
drugData$BDIchange<-drugData$wedsBDI-drugData$sundayBDI
by(drugData$BDIchange, drugData$drug, stat.desc, basic = FALSE, norm = TRUE)
boxplot<-ggplot(drugData, aes(drug, BDIchange)) + geom_boxplot()
boxplot
alcoholData<-subset(drugData, drug == "Alcohol")
ecstasyData<-subset(drugData, drug == "Ecstasy")
View(alcoholData)
alcoholModel<-wilcox.test(alcoholData$wedsBDI, alcoholData$sundayBDI,  paired = TRUE, correct= FALSE)
alcoholModel
ecstasyModel<-wilcox.test(ecstasyData$wedsBDI, ecstasyData$sundayBDI, paired = TRUE, correct= FALSE)
ecstasyModel
rFromWilcox(alcoholModel, 20)
rFromWilcox(ecstasyModel, 20)
alcoholModel<-wilcox.test(alcoholData$wedsBDI, alcoholData$sundayBDI,  paired = TRUE, correct= FALSE)
alcoholModel
rFromWilcox(alcoholModel, 20)
ecstasyModel<-wilcox.test(ecstasyData$wedsBDI, ecstasyData$sundayBDI, paired = TRUE, correct= FALSE)
ecstasyModel
rFromWilcox(ecstasyModel, 20)
soyaData<-read.delim("Soya.dat", header = TRUE)
soyaData$Soya<-factor(soyaData$Soya, levels = levels(soyaData$Soya)[c(4, 1, 2, 3)])
View(soyaData)
soyaData<-read.delim("Soya.dat", header = TRUE)
soyaData$Soya<-factor(soyaData$Soya, levels = levels(soyaData$Soya)[c(4, 1, 2, 3)])
soyaData<-read.delim("Soya.dat", header = TRUE)
str(soyaData)
soyaData <- soyaData%>%
mutate(group = as.factor())
soyaData <- soyaData %>%
mutate(group = as.factor(Soya))
soyaData <- soyaData %>% mutate(group = as.factor(Soya))
soyaData <- soyaData %>%
mutate(group = as.factor(Soya))
soyaData <- soyaData %>%
mutate(group = as.factor(Soya))
str(soyaData)
library(tidyr)
soyaData <- soyaData %>%
mutate(group = as.factor(Soya))
library(dplyr)
soyaData <- soyaData %>%
mutate(group = as.factor(Soya))
str(soyaData)
soyaData$group<-factor(soyaData$group, levels = levels(soyaData$group)[c(4, 1, 2, 3)])
soyaData$group<-factor(soyaData$group, levels = levels(soyaData$group)[c(4, 1, 2, 3)])
str(soyaData)
by(soyaData$Sperm, soyaData$group, stat.desc, basic=FALSE)
by(soyaData$Sperm, soyaData$group, stat.desc, desc = FALSE, basic=FALSE, norm=TRUE)
leveneTest(soyaData$Sperm, soyaData$Soya)
leveneTest(soyaData$Sperm, soyaData$group)
kruskal.test(Sperm ~ Soya, data = soyaData)
soyaData$Ranks<-rank(soyaData$Sperm)
by(soyaData$Ranks, soyaData$group, mean)
soyaData$group<-factor(soyaData$group, levels = levels(soyaData$group)[c(4, 1, 2, 3)])
soyaData<-read.delim("Soya.dat", header = TRUE)
soyaData <- soyaData %>%
mutate(group = as.factor(Soya))
soyaData<-read.delim("Soya.dat", header = TRUE)
Sperm<-c(0.35, 0.58, 0.88, 0.92, 1.22, 1.51, 1.52, 1.57, 2.43, 2.79, 3.40, 4.52, 4.72, 6.90, 7.58, 7.78, 9.62, 10.05, 10.32, 21.08, 0.33, 0.36, 0.63, 0.64, 0.77, 1.53, 1.62, 1.71, 1.94, 2.48, 2.71, 4.12, 5.65, 6.76, 7.08, 7.26, 7.92, 8.04, 12.10, 18.47, 0.40, 0.60, 0.96, 1.20, 1.31, 1.35, 1.68, 1.83, 2.10, 2.93, 2.96, 3.00, 3.09, 3.36, 4.34, 5.81, 5.94, 10.16, 10.98, 18.21, 0.31, 0.32, 0.56, 0.57, 0.71, 0.81, 0.87, 1.18, 1.25, 1.33, 1.34, 1.49, 1.50, 2.09, 2.70, 2.75, 2.83, 3.07, 3.28, 4.11)
Soya<-gl(4, 20, labels = c("No Soya", "1 Soya Meal", "4 Soya Meals", "7 Soya Meals"))
soyaData<-data.frame(Sperm, Soya)
soyaData$group<-factor(soyaData$group, levels = levels(soyaData$group)[c(4, 1, 2, 3)])
str(soyaData)
by(soyaData$Sperm, soyaData$group, stat.desc, basic=FALSE)
by(soyaData$Sperm, soyaData$Soya, stat.desc, basic=FALSE)
by(soyaData$Sper
leveneTest(soyaData$Sperm, soyaData$Soya)
leveneTest(soyaData$Sperm, soyaData$Soya)
kruskal.test(Sperm ~ Soya, data = soyaData)
soyaData$Ranks<-rank(soyaData$Sperm)
by(soyaData$Ranks, soyaData$Soya, mean)
ggplot(soyaData, aes(Soya, Sperm)) + geom_boxplot() +
labs(y = "Sperm Count", x = "Number of Soya Meals Per Week")
kruskalmc(Sperm ~ Soya, data = soyaData)
kruskalmc(Sperm ~ Soya, data = soyaData, cont = 'two-tailed')
jonckheere.test(soyaData$Sperm, as.numeric(soyaData$Soya))
Could do more focused comparisons
```{r}
kruskalmc(Sperm ~ Soya, data = soyaData, cont = 'two-tailed')
```
kruskalmc(Sperm ~ Soya, data = soyaData, cont = 'two-tailed')
kruskalmc(Sperm ~ Soya, data = soyaData, cont = 'two-tailed')
dietData<-read.delim("Diet.dat", header = TRUE)
View(dietData)
str(dietData)
stat.desc(dietData, basic = FALSE, norm = TRUE)
friedman.test(as.matrix(dietData))
friedmanmc(as.matrix(dietData))
install.packages("gmodels")
install.packages("gmodels")
library(gmodels)
library(MASS)
catsData<-read.delim("Cats.dat", header = TRUE)
View(catsData)
food <- c(10, 28)
affection <- c(114, 48)
catsTable <- cbind(food, affection)
View(catsTable)
CrossTable(catsTable, fisher = TRUE, chisq = TRUE, expected = TRUE, sresid = TRUE, format = "SPSS")
CrossTable(catsData$Training, catsData$Dance, fisher = TRUE, chisq = TRUE, expected = TRUE, prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE,  sresid = TRUE, format = "SPSS")
str(sat_df)
knitr::opts_chunk$set(echo = TRUE)
sat_df <- read.csv("SAT.csv", header = TRUE)
str(sat_df)
num_3_test <- t.test(sat_df$ERW, mu = 550)
summary(num_3_test)
num_3_test
num_3_test <- t.test(sat_df$ERW, mu = 550)
num_3_test <- t.test(sat_df$ERW, mu = 550)
num_3_test
t<-num_3_test$statistic[[1]]
df<-num_3_test$parameter[[1]]
r <- sqrt(t^2/(t^2+df))
round(r, 3)
sat_df <- read.csv("SAT.csv", header = TRUE)
View(sat_df)
View(sat_df)
CrossTable(sat_df$Sex, sat_df$Took.Essay., fisher = TRUE, chisq = TRUE, expected = TRUE, prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE,  sresid = TRUE, format = "SPSS")
CrossTable(sat_df$Sex, sat_df$Took.Essay., fisher = TRUE, chisq = TRUE, expected = TRUE, prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE,  sresid = TRUE, format = "SPSS")
num_3_ttest <- t.test(sat_df$ERW, mu = 550)
num_3_ttest
t<-num_3_ttest$statistic[[1]]
df<-num_3_ttest$parameter[[1]]
r <- sqrt(t^2/(t^2+df))
round(r, 3)
mathbar <- ggplot(sat_df, aes(Sex, MATH))
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Gender", y = "SAT Math Score") +
scale_y_continuous(limits = c(0, 70), breaks = seq(from = 0, to = 70, by = 10))
str(sat_df)
sat_df <- sat_df %>%
mutate(Sex_bin = case_when(burnout == "Male" ~ 1,
burnout == "Female" ~ 0))
sat_df <- sat_df %>%
mutate(Sex_bin = case_when(Sex == "Male" ~ 1,
Sex == "Female" ~ 0))
str(sat_df)
str(sat_df)
sat_df <- sat_df %>%
mutate(Race.Ethnicity_bin = case_when(Race.Ethnicity == "Asian" ~ 1,
Race.Ethnicity == "White" ~ 0
Race.Ethnicity =="Black/African American" ~ 2
sat_df <- sat_df %>%
mutate(Race.Ethnicity_bin = case_when(Race.Ethnicity == "Asian" ~ 1,
Race.Ethnicity == "White" ~ 0,
Race.Ethnicity == "Black/African American" ~ 2,
Race.Ethnicity == "Hispanic/Latio" ~ 3,
Race.Ethnicity == "Two or More Races" ~ 4,
Race.Ethnicity == "No Response" ~ 5))
str((sat_df))
mathbar <- ggplot(sat_df, aes(Sex, MATH))
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Gender", y = "SAT Math Score") +
scale_y_continuous(limits = c(0, 70), breaks = seq(from = 0, to = 70, by = 10))
mathbar <- ggplot(sat_df, aes(Sex_bin, MATH))
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Gender", y = "SAT Math Score") +
scale_y_continuous(limits = c(0, 70), breaks = seq(from = 0, to = 70, by = 10))
sat_df <- sat_df %>%
mutate(Sex_factor = case_when(Sex == "Male" ~ 1,
Sex == "Female" ~ 0))
sat_df <- sat_df %>%
mutate(Race.Ethnicity_factor = case_when(Race.Ethnicity == "Asian" ~ 1,
Race.Ethnicity == "White" ~ 0,
Race.Ethnicity == "Black/African American" ~ 2,
Race.Ethnicity == "Hispanic/Latio" ~ 3,
Race.Ethnicity == "Two or More Races" ~ 4,
Race.Ethnicity == "No Response" ~ 5))
sat_df <- read.csv("SAT.csv", header = TRUE)
sat_df <- sat_df %>%
mutate(Sex_factor = case_when(Sex == "Male" ~ 1,
Sex == "Female" ~ 0))
sat_df <- sat_df %>%
mutate(Race.Ethnicity_factor = case_when(Race.Ethnicity == "Asian" ~ 1,
Race.Ethnicity == "White" ~ 0,
Race.Ethnicity == "Black/African American" ~ 2,
Race.Ethnicity == "Hispanic/Latio" ~ 3,
Race.Ethnicity == "Two or More Races" ~ 4,
Race.Ethnicity == "No Response" ~ 5))
mathbar <- ggplot(sat_df, aes(Sex_factor, MATH))
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Gender", y = "SAT Math Score") +
scale_y_continuous(limits = c(0, 70), breaks = seq(from = 0, to = 70, by = 10))
mathbar <- ggplot(sat_df, aes(Sex_factor, MATH))
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Gender", y = "SAT Math Score") +
scale_y_continuous(limits = c(0, 70), breaks = seq(from = 0, to = 70, by = 10))
str(sat_df)
sat_df <- read.csv("SAT.csv", header = TRUE)
sat_df <- sat_df %>% mutate(Sex_factor = as.factor(Sex))
sat_df <- sat_df %>% mutate(Sex_factor = as.factor(Sex))
str(sat)
str(sat_df)
mathbar <- ggplot(sat_df, aes(Sex_factor, MATH))
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Gender", y = "SAT Math Score") +
scale_y_continuous(limits = c(0, 70), breaks = seq(from = 0, to = 70, by = 10))
sat_df <- sat_df %>% mutate(Race_factor = as.factor(Race.Ethnicity))
stat.desc(sat_df$MATH)
round(stat.desc(sat_df$MATH, basic = FALSE, norm = TRUE), digits = 3)
round(stat.desc(sat_df$MATH, basic = FALSE, norm = TRUE), digits = 3)
round(stat.desc(sat_df$MATH, basic = TRUE, norm = TRUE), digits = 3)
round(stat.desc(sat_df$MATH, basic = FALSE, norm = FALSE), digits = 3)
hist_satMath <- ggplot(sat_df, aes (MATH))+ theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 3000) +
labs(title = "Histogram of SAT Math Scores", x = "Math Scores", y = "Density")
hist_satMath
hist_satMath <- ggplot(sat_df, aes (MATH))+ theme(legend.position = "none") +
geom_histogram(color = "black", fill = "white", binwidth = 3000) +
labs(title = "Histogram of SAT Math Scores", x = "Math Scores", y = "Density")
hist_satMath
str(sat_df)
str(dietData)
lapply(sat_df$MATH, as.numeric)
str(sat_df)
sat_df <- sat_df %>% mutate(MATH = as.numeric(MATH))
str(sat_df)
hist_satMath <- ggplot(sat_df, aes (MATH))+ theme(legend.position = "none") +
geom_histogram(color = "black", fill = "white", binwidth = 3000) +
labs(title = "Histogram of SAT Math Scores", x = "Math Scores", y = "Density")
hist_satMath
hist_satMath <- ggplot(sat_df, aes (MATH))+ theme(legend.position = "none") +
geom_histogram(color = "black", fill = "white", binwidth = 0.01) +
labs(title = "Histogram of SAT Math Scores", x = "Math Scores", y = "Density")
hist_satMath
hist_satMath
hist_satMath <- ggplot(sat_df, aes (MATH))+ theme(legend.position = "none") +
geom_histogram(color = "black", fill = "white", binwidth = 0.01) +
labs(title = "Histogram of SAT Math Scores", x = "Math Scores", y = "Densit
hist_satMath <- ggplot(sat_df, aes (MATH))+ theme(legend.position = "none") +
hist_satMath <- ggplot(sat_df, aes (MATH))+ theme(legend.position = "none") +
geom_histogram(color = "black", fill = "white", binwidth = 100) +
labs(title = "Histogram of SAT Math Scores", x = "Math Scores", y = "Density")
hist_satMath
hist_satMath <- ggplot(sat_df, aes (MATH))+ theme(legend.position = "none") +
geom_histogram(color = "black", fill = "white", binwidth = 10) +
labs(title = "Histogram of SAT Math Scores", x = "Math Scores", y = "Density")
hist_satMath
hist_satMath <- ggplot(sat_df, aes (MATH))+ theme(legend.position = "none") +
geom_histogram(color = "black", fill = "white", binwidth = 5) +
labs(title = "Histogram of SAT Math Scores", x = "Math Scores", y = "Density")
hist_satMath
hist_satMath <- ggplot(sat_df, aes (MATH))+ theme(legend.position = "none") +
geom_histogram(color = "black", fill = "white", binwidth = 8) +
labs(title = "Histogram of SAT Math Scores", x = "Math Scores", y = "Density")
hist_satMath
hist_satMath <- ggplot(sat_df, aes (MATH))+ theme(legend.position = "none") +
geom_histogram(color = "black", fill = "white", binwidth = 10) +
labs(title = "Histogram of SAT Math Scores", x = "Math Scores", y = "Density")
hist_satMath
qqplot.satMATH <- qplot(sample = sat_df$MATH, stat="qq")
qqplot.satMATH+ labs(title = "QQPlot for SAT Math Scores", x = "Thoeretical", y = "Sample")
shapiro.test(sat_df$MATH)
mathbar <- ggplot(sat_df, aes(Sex_factor, MATH))
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Gender", y = "SAT Math Score") +
scale_y_continuous(limits = c(0, 70), breaks = seq(from = 0, to = 70, by = 10))
mathbar <- ggplot(sat_df, aes(Sex, MATH))
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Gender", y = "SAT Math Score") +
scale_y_continuous(limits = c(0, 70), breaks = seq(from = 0, to = 70, by = 10))
ggplot(sat_df) +
geom_bar( aes(x="Sex", y= "MATH"), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
ggplot(sat_df) +
geom_bar( aes(x="Sex", y= "MATH"), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=Sex, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
ggplot(sat_df) +
geom_bar( aes(x="Sex", y= "MATH"), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x="Sex", ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
ggplot(sat_df, aes(x = "Sex", y = "Math")) +
geom_boxplot() +
labs(x = "SAT Test Section",
y = "Section Score",
title = "Distribution of SAT Math and Verbal Scores")
mathbar <- ggplot(sat_df, aes(Sex, MATH))
spiderbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Type of Stimulus", y = "Anxiety"))
spiderbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Type of Stimulus", y = "Anxiety")
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Type of Stimulus", y = "Anxiety")
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Type of Stimulus", y = "Anxiety") +
scale_y_continuous(limits = c(0, 900), breaks = seq(from = 0, to = 900, by = 50))
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Type of Stimulus", y = "Anxiety") +
scale_y_continuous(limits = c(0, 900), breaks = seq(from = 0, to = 900, by = 100))
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Gender", y = "SAT Math Score") +
scale_y_continuous(limits = c(0, 900), breaks = seq(from = 0, to = 900, by = 100))
setwd("C:/Users/Amy Richardson/Dropbox/VT - PhD/ENGE 5714 - Quant/R Practice/ENGE5714/Problem Set 2")
setwd("C:/Users/Amy Richardson/Dropbox/VT - PhD/ENGE 5714 - Quant/R Practice/ENGE5714/Problem Set 3")
