metallica <-c("Lars", "James", "Jason", "Kirk")
metallica
metallica <-c(metallica, "Rob")
metallica <-metallica[metallica != "Jason"]
metallica
bsb <-c("Kevin", "Brian", "Nick", "Howie", "AJ")
metallicaNames<- c("Lars", "James", "Kirk", "Rob")
metallicaAges <- c(47, 47, 48, 46)
metallica <-data.frame(Name = metallicaNames, Age = metallicaAges)
metallica
metallica$childAge<- c(12,12,4,6)
metallica
names(metallica)
metallica<-list(metallicaNames, metallicaAges)
metallica
metallica<-cbind(metallicaNames,metallicaAges)
metallica
metallica <-data.frame(Name = metallicaNames, Age = metallicaAges)
metallica$childAge<- c(12,12,4,6)
metalica
metallica
metallica$fatherhoodAge <- metallica$Ages - metallica$childAge
metallica$fatherhoodAge <- metallica$Age - metallica$childAge
metallica
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data=mpg)
mpg
mtcars
?mpg
ggplot(data = mpg)+geom_point(mapping=aes(x = hwy, y = cyl))
ggplot(data = mpg)+geom_point(mapping=aes(x = cyl, y = hwy))
ggplot(data = mpg)+geom_point(mapping=aes(x = drv, y = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class)
0
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = class))
?mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = displ<5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg)+geom_point(mapping=aes(x = drv, y = class))+geom_point()+geom_smooth()
ggplot(data = mpg)+geom_point(mapping=aes(x = displ, y = hwy))+geom_point()+geom_smooth()
ggplot(data = mpg)+geom_point(mapping=aes(x = displ, y = hwy))++geom_smooth()
ggplot(data = mpg)+geom_point(mapping=aes(x = displ, y = hwy))+geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
diamonds
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
<- library(tidyverse)
library(tidyverse)
ggplot(data = mpg)+geom_point(mapping = aes(x = displ, y = hwy))
filter(mpg,cyl = 8)
filter(mpg, cyl = 4)
?filter
filter(mpg, cyl<8)
filter (diamond, carat > 3)
filter (diamonds, carat > 3 )
library(nycflights13)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(nycflights13)
install.packages("dplyr")
library(nycflights13)
library(nycflights13)
dplyr
install.packages("dplyr")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
library(nycflights13)
library(tidyverse)
install.packages("dplyr")
install.packages("dplyr")
library(nycflights13)
install.packages("dplyr")
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(tidyverse)
install.packages("nycflights13")
library(nycflights13)
print(nycflights13::flights)
filter(flights,month==1, day ==1)
filter(flights,month18, day 11)
filter(flights, month ==8, day ==11)
?nycflights13
filter(flights,arr_delay > 120 | dep_delay >120)
nycflights13::airlines
nycflights13::airports
?flights
filter(flights, origin == "IAH" | origin == "HOU")
library(nycflights13)
filter(flights, origin == "IAH" | origin == "HOU")
filter(flights, dest == "IAH" | dest == "HOU")
nyflights13::dest
?flights
?nycflights13
library(nycflights13)
?dest
dest::
nycflights13::deest
nycflights13::dest
nycflights13::airports
nycflights13::dest
ncyflights13
filter(flights, airlines == UA & airlines == DL and airlines == AA)
filter(flights, airlines == UA & airlines == DL & airlines == AA)
filter(flights, airlines == UA & airlines == DL & airlines == AA)
library(nycflights13)
library(tidyverse)
filter(flights, airlines == UA & airlines == DL & airlines == AA)
rlang::last_error()
nycflights13::airlines
filter(flights, airlines == "UA" & airlines == "DL" & airlines == "AA")
rlang::last_error()
filter(flights, airlines == "UA")
filter(flights, month ==1, day == 1)
filter(flights, carrier == UA)
filter(flights, carrier "UA")
filter(flights, carrier == "UA")
filter(flights, carrier == "UA" & carrier == "DL" & carrier (AA))
filter(flights, carrier == "UA" & carrier == "DL" & carrier == "AA")
filter(flights, carrier == "UA" | carrier == "DL" | carrier == "AA")
filter(flights, dest == "IAD" | dest=="HOU")
filter(flights, dest == "IAD" | dest=="HOU")
filter(flights, dest == "IAD" | dest=="HOU")
filter(flights, month == 7 | month == 8 | month == 9)
filter(flights, dep_delay <= 0 & arr_delay > 0)
filter(flights, dep_delay <= 0 & arr_delay > 120)
filter(flights, month == 8 & day == 11 & origin == "CVG")
filter(flights, origin == "CVG")
filter(flights, origin == "ORD")
filairports
airports
filter(airports, "CVG")
filter(flights, dest == "CLE")
filter(flights, dest == "CVG")
filter fligts, origin == "CVG")
filter(flights, origin == "CVG")
filter (flights, between(month, 7, 9))
is.na(dep_time)
arrange(flights, year, month, day)
arrange(flights, desc(dep_delay))
arrange(flights, air_time)
arrange(flights, distance)
arrange(flights, desc(distance))
view()
view(flights)
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
#> # A tibble: 336,776 x 9
#>    year month   day dep_delay arr_delay distance air_time  gain speed
#>   <int> <int> <int>     <dbl>     <dbl>    <dbl>    <dbl> <dbl> <dbl>
#> 1  2013     1     1         2        11     1400      227    -9  370.
#> 2  2013     1     1         4        20     1416      227   -16  374.
#> 3  2013     1     1         2        33     1089      160   -31  408.
#> 4  2013     1     1        -1       -18     1576      183    17  517.
#> 5  2013     1     1        -6       -25      762      116    19  394.
#> 6  2013     1     1        -4        12      719      150   -16  288.
#> # â€¦ with 336,770 more rows
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
flights
flights_test <-(select(flights, dep_time, sched_dep_time))
flights_test
mutate(flights_test, dep_time_min = dep_time %/% 100 * 60 + dep_time %% 100)
flights_test <- (select, air_time, dep_time, arr_time)
flights_test <- select(flights, air_time, dep_time, arr_time)
flights_test
mutate(flights_test, taxi_time = (arr_time  %/% 100 * 60 + arr_time %% 100) - (dep_time %/% 100 * 60 + dep_time %% 100) - air time
mutate(flights_test, taxi_time = (arr_time  %/% 100 * 60 + arr_time %% 100) - (dep_time %/% 100 * 60 + dep_time %% 100) - air time)
mutate(flights_test, taxi_time = (arr_time  %/% 100 * 60 + arr_time %% 100) - (dep_time %/% 100 * 60 + dep_time %% 100) - air_time)
mutate(flights_test, taxi_time = ((arr_time  %/% 100 * 60 + arr_time %% 100) - (dep_time %/% 100 * 60 + dep_time %% 100)) - air_time)
summarize(flights, delay = mean(dep_delay, na.rm = TRUE))
source('~/.active-rstudio-document', echo=TRUE)
getwd()
library(tidyverse)
?diamonds
dimonds
diamonds
Read in Percentage of Engineering Degrees from .csv files
all_degrees <- read.csv("HE_Institutions.csv", header = TRUE)
#Rename first column to match with Teachers.
names(all_degrees)[1] <- "div_name"
#Isolate the 2-year and 4-year columns and convert to percentage
egr_degrees <- all_degrees %>%
select("div_name", "X.EngTot2yr", "X.EngTot4yr" ) %>%
transform(X.EngTot2yr = X.EngTot2yr * 100) %>%
transform(X.EngTot4yr = X.EngTot4yr * 100)
#Create a histogram for 2Y Engineering
hist_2y<- ggplot(egr_degrees, aes (X.EngTot2yr))+ theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(title = "Histogram of 2 Year Engineering Degrees", x = "Percentange of 2 Year Engineering Degrees", y = "Density")
hist_2y
hist_2y +
stat_function(fun = dnorm, args = list(mean = mean(egr_degrees$X.EngTot2yr, na.rm = TRUE), sd = sd(egr_degrees$X.EngTot2yr, na.rm = TRUE)), color = "black", size = 1)
#Descriptive Statistics for 2Y Engineering
round(stat.desc(egr_degrees$X.EngTot2yr, basic = FALSE, norm = TRUE), digits = 3)
#Q-QPlot of 2Year
qqplot.2Yegr_degrees<- qplot(sample = egr_degrees$X.EngTot2yr, stat="qq")
qqplot.2Yegr_degrees+ labs(title = "QQPlot for 2 Year Engineering Degrees", x = "Thoeretical", y = "Sample")
#Shapiro-Wilk Test 2 Year
shapiro.test(egr_degrees$X.EngTot2yr)
#Create a histogram for 4Y Engineering
hist_4y<- ggplot(egr_degrees, aes (X.EngTot4yr))+ theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(title = "Histogram of 4 Year Engineering Degrees", x = "Percentange of 4 Year Engineering Degrees", y = "Density")
hist_4y
hist_4y +
stat_function(fun = dnorm, args = list(mean = mean(egr_degrees$X.EngTot4yr, na.rm = TRUE), sd = sd(egr_degrees$X.EngTot4yr, na.rm = TRUE)), color = "black", size = 1)
#Descriptive Statistics for 4Y Engineering
round(stat.desc(egr_degrees$X.EngTot4yr, basic = FALSE, norm = TRUE), digits = 3)
#Q-QPlot of 4Year
qqplot.4Yegr_degrees<- qplot(sample = egr_degrees$X.EngTot4yr, stat="qq")
qqplot.4Yegr_degrees+ labs(title = "QQPlot for 4 Year Engineering Degrees", x = "Thoeretical", y = "Sample")
#Shapiro-Wilk Test 4 Year
shapiro.test(egr_degrees$X.EngTot4yr)
library(car)
library(ggplot2)
library(pastecs)
library(psych)
library(Rcmdr)
knitr::opts_chunk$set(echo = TRUE)
sat_df <- read.csv("SAT.csv", header = TRUE)
sat_df <- sat_df %>% mutate(Sex_factor = as.factor(Sex))
sat_df <- sat_df %>% mutate(Sex_factor = as.factor(Sex))
sat_df <- sat_df %>% mutate(Race_factor = as.factor(Race.Ethnicity))
View(sat_df)
library(ggplot2)
library(granova)
library(car)
library(Rcmdr)
library(pastecs)
library(multcomp)
library(compute.es)
library(WRS2)
sat_df <- sat_df %>% mutate(Sex_factor = as.factor(Sex))
sat_df <- sat_df mutate(Sex_factor = as.factor(Sex))
sat_df <- sat_df %>% mutate(Sex_factor = as.factor(Sex))
sat_df <- sat_df %>%
mutate(Sex_factor = as.factor(Sex))
mutate(sat_df, Sex_factor = as.factor(Sex))
Library("tidyr")
Library(tidyr)
library(tidyr)
sat_df <- sat_df %>% mutate(Race_factor = as.factor(Race.Ethnicity))
library (dplyr)
sat_df <- sat_df %>% mutate(Race_factor = as.factor(Race.Ethnicity))
sat_df <- sat_df %>% mutate(Sex_factor = as.factor(Sex))
sat_df <- sat_df %>% mutate(MATH = as.numeric(MATH))
setwd("C:/Users/Amy Richardson/Dropbox/VT - PhD/ENGE 5714 - Quant/R Practice/ENGE5714/Week 09")
setwd("C:/Users/Amy Richardson/Dropbox/VT - PhD/ENGE 5714 - Quant/R Practice/ENGE5714/Problem Set 3")
hist_satEng <- ggplot(sat(df, aes(x = MATH, fill = Race_factor))) +
theme(legend.position = "none") +
geom_historgram() +
facet_wrap(Variable ~., scales = "free")
hist_satEng <- ggplot(sat_df, aes(x = MATH, fill = Race_factor)) +
theme(legend.position = "none") +
geom_historgram() +
facet_wrap(Variable ~., scales = "free")
hist_satEng <- ggplot(sat_df, aes(x = MATH, fill = Race_factor)) +
theme(legend.position = "none") +
geom_histogram() +
facet_wrap(Variable ~., scales = "free")
hist_satEng
hist_satEng <- ggplot(sat_df, aes(x = ERW, y = Race_factor, fill = Race_factor)) +
theme(legend.position = "none") +
geom_histogram() +
facet_wrap(Variable ~., scales = "free")
hist_satEng
hist_satEng <- %>%
hist_satEng %>%
ggplot(aes(x = ERW, fill = Race.factor)) +
geom_histogram () +
facet_grit(Race.factor ~.)
sat_df %>%
ggplot(aes(x = ERW, fill = Race.factor)) +
geom_histogram () +
facet_grit(Race.factor ~.)
sat_df %>%
ggplot(aes(x = ERW, fill = Race.factor)) +
geom_histogram () +
facet_grid(Race.factor ~.)
sat_race_df <- select(sat_df, Race.factor, ERW)
sat_race_df <- select(sat_df, "Race.factor", "ERW")
sat_df %>%
ggplot(aes(x = ERW, fill = Race_factor)) +
geom_histogram () +
facet_grid(Race_factor ~.)
sat_race_df <- select(sat_df, "Race_factor", "ERW")
View(sat_race_df)
sat_race_wide <- unstack(sat_race_df, Race_factor ~ ERW)
View(sat_race_wide)
sat_race_wide <- unstack(sat_race_df, ERW ~ Race_factor)
View(sat_race_wide)
anova_model <- aov(ERW ~ Race.factor, data = sat_df)
anova_model <- aov(ERW ~ Race_factor, data = sat_df)
summary(anova_model)
anova_model <- aov(ERW ~ Race_factor, data = sat_df)
summary(anova_model)
leveneTest(sat_df$ERW, sat_df$Race_factor, center = median)
oneway.test(ERW ~ Race_factor, data = sat_df)
summary.lm(anova_model)
View(sat_race_wide)
sat_race_wide <- unstack(sat_race_df, Race_factor)
sat_race_wide <- unstack(sat_race_df, "Race_factor")
sat_race_wide <- unstack(sat_race_df, Race_factor)
sat_race_wide <- unstack(sat_race_df, Race_factor ~ ERW)
sat_race_wide <- unstack(sat_race_df, ERW ~ Race.factor)
sat_race_wide <- unstack(sat_race_df, ERW ~ Race_factor)
str(sat_race_df)
str(sat_race_wide)
sat_race_wide <- spread(sat_race_df, ERW, Race_factor)
sat_race_wide <- spread(sat_race_df, Race_factor, ERW)
sat_race_df <- select(sat_df, "Race_factor", "ERW")
sat_race_wide <- spread(sat_race_df, Race_factor, ERW)
sat_race_df <- select(sat_df, "Id", "Race_factor", "ERW")
sat_race_df <- select(sat_df, "X", "Race_factor", "ERW")
sat_race_wide <- spread(sat_race_df, Race_factor, ERW)
View(sat_race_wide)
sat_race_wide <- unstack(sat_race_df, Race_factor, ERW)
sat_race_df <- select(sat_df, "Race_factor", "ERW")
sat_race_wide <- unstack(sat_race_df, Race_factor, ERW)
sat_race_wide <- unstack(sat_race_df, Race_factor, ERW)
sat_race_wide <- unstack(sat_race_df, ERW, Race_factor)
sat_race_wide <- unstack(sat_race_df, ERW ~ Race_factor)
hist_ENG_all <- ggplot(sat_df, aes (ERW))+ theme(legend.position = "none") +
geom_histogram(color = "black", fill = "white", binwidth = 10) +
labs(title = "Histogram of SAT English Scores", x = "English Scores", y = "Density")
hist_ENG_all
round(stat.desc(sat_df$ERW, basic = FALSE, norm = FALSE), digits = 3)
mathbar <- ggplot(sat_df, aes(Sex_factor, MATH))
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Gender", y = "SAT Math Score") +
scale_y_continuous(limits = c(0, 900), breaks = seq(from = 0, to = 900, by = 100))
round(stat.desc(sat_df$MATH, basic = FALSE, norm = FALSE), digits = 3)
mathbar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") +
stat_summary(fun.data = mean_cl_normal, geom = "pointrange") +
labs(x = "Gender", y = "SAT Math Score") +
scale_y_continuous(limits = c(0, 900), breaks = seq(from = 0, to = 700, by = 100))
ind.t.test <- t.test(MATH ~ Sex_factor, data = sat_df)
ind.t.test
t<-ind.t.test$statistic[[1]]
df<-ind.t.test$parameter[[1]]
r <- sqrt(t^2/(t^2+df))
round(r, 3)
qqplot.satENG <- qplot(sample = sat_df$ERW, stat="qq")
qqplot.satENG + labs(title = "QQPlot for SAT English Scores", x = "Thoeretical", y = "Sample")
setwd("C:/Users/Amy Richardson/Dropbox/VT - PhD/ENGE 5714 - Quant/R Practice/ENGE5714/Problem Set 3")
sat_df %>%
ggplot(aes(x = ERW, fill = Race_factor)) +
geom_histogram () +
facet_grid(Race_factor ~.)
sat_df %>%
ggplot(aes(x = Race_factor, y = ERW)) +
geom_boxplot() +
labs(title = "Boxplot of English SAT scores by Race/Ethinicity",
x ="Race/Ethnicity",
y = "English SAT Scores") +
theme(plot.title = element_text(hjust = 0.5))
summary.lm(anova_model)
round(by(sat_df$ERW, , sat_df$Race_factor, stat.desc), digits = 3)
by(sat_df$ERW, sat_df$Race_factor, stat.desc)
round(by(sat_df$ERW, sat_df$Race_factor, stat.desc), digits = 3)
round(by(sat_df$ERW, sat_df$Race_factor, stat.desc), digits = 3)
by(sat_df$ERW, sat_df$Race_factor, stat.desc)
responseOnly_Race_df <- select(sat_df, "Race_factor", "ERW")
View(responseOnly_Race_df)
str(responseOnly_Race_df)
responseOnly_Race_df[responseOnly_Race_df$Race_factor ! = 4]
responseOnly_Race_df[responseOnly_Race_df$Race_factor ! == 4]
subset(responseOnly_Race_df$Race_factor ==4)
responseOnly_Race_df <- subset(responseOnly_Race_df$Race_factor ==4)
responseOnly_Race_df <- subset(responseOnly_Race_df$Race_factor ==4, )
responseOnly_Race_df <- subset(responseOnly_Race_df, Race_factor == 4, )
responseOnly_Race_df <- select(sat_df, "Race_factor", "ERW")
responseOnly_Race_df <- subset(responseOnly_Race_df, Race_factor == "No Response", )
responseOnly_Race_df <- select(sat_df, "Race_factor", "ERW")
responseOnly_Race_df[responseOnly_Race_df$Race_factor !=4]
responseOnly_Race_df[responseOnly_Race_df$Race_factor != "No response"]
str(responseOnly_Race_df)
responseOnly_Race_df[responseOnly_Race_df$Race_factor != "No response"]
responseOnly_Race_df <- subset(responseOnly_Race_df, Race_factor == "No response", )
responseOnly_Race_df <- select(sat_df, "Race_factor", "ERW")
responseOnly_Race_df <- subset(responseOnly_Race_df, Race_factor != "No response", )
responseOnly_Race_df <- subset(responseOnly_Race_df, Race_factor != "No response", Race_factor != "Two or More Races" )
responseOnly_Race_df %>%
ggplot(aes(x = Race_factor, y = ERW)) +
geom_boxplot() +
labs(title = "Boxplot of English SAT scores by Race/Ethinicity",
x ="Race/Ethnicity",
y = "English SAT Scores") +
theme(plot.title = element_text(hjust = 0.5))
responseOnly_Race_df <- subset(responseOnly_Race_df, Race_factor != "Two or More Races" ,  )
responseOnly_Race_df %>%
ggplot(aes(x = Race_factor, y = ERW)) +
geom_boxplot() +
labs(title = "Boxplot of English SAT scores by Race/Ethinicity",
x ="Race/Ethnicity",
y = "English SAT Scores") +
theme(plot.title = element_text(hjust = 0.5))
anova_model_2 <- aov(ERW ~ Race_factor, data = responseOnly_Race_df)
summary(anova_model2)
anova_model2 <- aov(ERW ~ Race_factor, data = responseOnly_Race_df)
summary(anova_model2)
leveneTest(responseOnly_Race_df$ERW, responseOnly_Race_df$Race_factor, center = median)
oneway.test(ERW ~ Race_factor, data = responseOnly_Race_df)
pairwise.t.test(sat_df$ERW, sat_df$Race_factor, p.adjust.method = "bonferroni")
pairwise.t.test(sat_df$ERW, sat_df$Race_factor, p.adjust.method = "bonferroni")
pairwise.t.test(sat_df$ERW, sat_df$Race_factor, p.adjust.method = "bonferroni")
round(by(sat_df$ERW, sat_df$Race_factor, stat.desc), digits = 3)
round(stat.desc(sat_df$ERW, basic = FALSE, norm = FALSE), digits = 3)
by(sat_df$ERW, sat_df$Race_factor, stat.desc)
sat_df %>%
qplot(aes(x = ERW, fill = Race_factor)) +
facet_grid(Race_factor ~.)
sat_df %>%
ggplot(aes(x = Sex_factor, y = MATH)) +
geom_boxplot() +
labs(title = "Boxplot of Math SAT scores by Gender",
x ="Gender",
y = "Math SAT Scores") +
theme(plot.title = element_text(hjust = 0.5))
by(sat_df$ERW, sat_df$Race_factor, stat.desc)
by(sat_df$MATH, sat_df$Sex_factor, stat.desc, basic = FALSE, norm = TRUE)
by(sat_df$MATH, sat_df$Sex_factor, stat.desc, basic = TRUE, norm = TRUE)
by(sat_df$MATH, sat_df$Sex_factor, stat.desc, norm = TRUE)
by(sat_df$MATH, sat_df$Sex_factor, stat.desc, )
CrossTable(sat_df$Sex, sat_df$Took.Essay., fisher = TRUE, chisq = TRUE, expected = TRUE, prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE,  sresid = TRUE, format = "SPSS")
CrossTable(sat_df$Sex_factor, sat_df$Took.Essay., fisher = TRUE, chisq = TRUE, expected = TRUE, prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE,  sresid = TRUE, format = "SPSS")
library(gmodels)
CrossTable(sat_df$Sex_factor, sat_df$Took.Essay., fisher = TRUE, chisq = TRUE, expected = TRUE, prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE,  sresid = TRUE, format = "SPSS")
---
title: "Problem_Set_3"
author: "Amy Richardson"
date: "3/16/2021"
output: word_document
---
sat_df %>%
ggplot(aes(x = ERW, fill = Race_factor)) +
geom_histogram () +
facet_grid(Race_factor ~., scales = "free")
sat_df %>%
ggplot(aes(x = ERW, fill = Race_factor)) +
geom_histogram () +
facet_grid(Race_factor ~., scales = "free")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
round(stat.desc(sat_df$ERW, basic = TRUE, norm = FALSE), digits = 3)
leveneTest(sat_df$ERW, center = median)
round(stat.desc(sat_df$MATH, basic = TRUE, norm = FALSE), digits = 3)
