ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
<- library(tidyverse)
library(tidyverse)
ggplot(data = mpg)+geom_point(mapping = aes(x = displ, y = hwy))
filter(mpg,cyl = 8)
filter(mpg, cyl = 4)
?filter
filter(mpg, cyl<8)
filter (diamond, carat > 3)
filter (diamonds, carat > 3 )
library(nycflights13)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(nycflights13)
install.packages("dplyr")
library(nycflights13)
library(nycflights13)
dplyr
install.packages("dplyr")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
library(nycflights13)
library(tidyverse)
install.packages("dplyr")
install.packages("dplyr")
library(nycflights13)
install.packages("dplyr")
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(tidyverse)
install.packages("nycflights13")
library(nycflights13)
print(nycflights13::flights)
filter(flights,month==1, day ==1)
filter(flights,month18, day 11)
filter(flights, month ==8, day ==11)
?nycflights13
filter(flights,arr_delay > 120 | dep_delay >120)
nycflights13::airlines
nycflights13::airports
?flights
filter(flights, origin == "IAH" | origin == "HOU")
library(nycflights13)
filter(flights, origin == "IAH" | origin == "HOU")
filter(flights, dest == "IAH" | dest == "HOU")
nyflights13::dest
?flights
?nycflights13
library(nycflights13)
?dest
dest::
nycflights13::deest
nycflights13::dest
nycflights13::airports
nycflights13::dest
ncyflights13
filter(flights, airlines == UA & airlines == DL and airlines == AA)
filter(flights, airlines == UA & airlines == DL & airlines == AA)
filter(flights, airlines == UA & airlines == DL & airlines == AA)
library(nycflights13)
library(tidyverse)
filter(flights, airlines == UA & airlines == DL & airlines == AA)
rlang::last_error()
nycflights13::airlines
filter(flights, airlines == "UA" & airlines == "DL" & airlines == "AA")
rlang::last_error()
filter(flights, airlines == "UA")
filter(flights, month ==1, day == 1)
filter(flights, carrier == UA)
filter(flights, carrier "UA")
filter(flights, carrier == "UA")
filter(flights, carrier == "UA" & carrier == "DL" & carrier (AA))
filter(flights, carrier == "UA" & carrier == "DL" & carrier == "AA")
filter(flights, carrier == "UA" | carrier == "DL" | carrier == "AA")
filter(flights, dest == "IAD" | dest=="HOU")
filter(flights, dest == "IAD" | dest=="HOU")
filter(flights, dest == "IAD" | dest=="HOU")
filter(flights, month == 7 | month == 8 | month == 9)
filter(flights, dep_delay <= 0 & arr_delay > 0)
filter(flights, dep_delay <= 0 & arr_delay > 120)
filter(flights, month == 8 & day == 11 & origin == "CVG")
filter(flights, origin == "CVG")
filter(flights, origin == "ORD")
filairports
airports
filter(airports, "CVG")
filter(flights, dest == "CLE")
filter(flights, dest == "CVG")
filter fligts, origin == "CVG")
filter(flights, origin == "CVG")
filter (flights, between(month, 7, 9))
is.na(dep_time)
arrange(flights, year, month, day)
arrange(flights, desc(dep_delay))
arrange(flights, air_time)
arrange(flights, distance)
arrange(flights, desc(distance))
view()
view(flights)
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
#> # A tibble: 336,776 x 9
#>    year month   day dep_delay arr_delay distance air_time  gain speed
#>   <int> <int> <int>     <dbl>     <dbl>    <dbl>    <dbl> <dbl> <dbl>
#> 1  2013     1     1         2        11     1400      227    -9  370.
#> 2  2013     1     1         4        20     1416      227   -16  374.
#> 3  2013     1     1         2        33     1089      160   -31  408.
#> 4  2013     1     1        -1       -18     1576      183    17  517.
#> 5  2013     1     1        -6       -25      762      116    19  394.
#> 6  2013     1     1        -4        12      719      150   -16  288.
#> # â€¦ with 336,770 more rows
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
flights
flights_test <-(select(flights, dep_time, sched_dep_time))
flights_test
mutate(flights_test, dep_time_min = dep_time %/% 100 * 60 + dep_time %% 100)
flights_test <- (select, air_time, dep_time, arr_time)
flights_test <- select(flights, air_time, dep_time, arr_time)
flights_test
mutate(flights_test, taxi_time = (arr_time  %/% 100 * 60 + arr_time %% 100) - (dep_time %/% 100 * 60 + dep_time %% 100) - air time
mutate(flights_test, taxi_time = (arr_time  %/% 100 * 60 + arr_time %% 100) - (dep_time %/% 100 * 60 + dep_time %% 100) - air time)
mutate(flights_test, taxi_time = (arr_time  %/% 100 * 60 + arr_time %% 100) - (dep_time %/% 100 * 60 + dep_time %% 100) - air_time)
mutate(flights_test, taxi_time = ((arr_time  %/% 100 * 60 + arr_time %% 100) - (dep_time %/% 100 * 60 + dep_time %% 100)) - air_time)
summarize(flights, delay = mean(dep_delay, na.rm = TRUE))
source('~/.active-rstudio-document', echo=TRUE)
getwd()
library(tidyverse)
?diamonds
dimonds
diamonds
dlf <- read.delim("DownloadFestivalNoOutlier.dat", header = TRUE)
setwd("C:/Users/Amy Richardson/Dropbox/VT - PhD/ENGE 5714 - Quant/GitHub/ENGE5714_Quant/Week 4")
dlf <- read.delim("DownloadFestivalNoOutlier.dat", header = TRUE)
hist.day1 <- ggplot(dlf, aes(day1)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "Hygiene score on Day 1", y = "Density")
hist.day1
install.packages("car")
install.packages("ggplot2")
install.packages("pastecs")
install.packages("psych")
library(car)
library(ggplot2)
library(pastecs)
library(psych)
library(Rcmdr)
hist.day1 <- ggplot(dlf, aes(day1)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "Hygiene score on Day 1", y = "Density")
hist.day1
hist.day1 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day1, na.rm. = TRUE), sd = sd(dlf$day1, na.rm = TRUE)), color = "black", size = 1)
hist.day1 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day1, na.rm. = TRUE), sd = sd(dlf$day1, na.rm = TRUE)), color = "black", size = 1) +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day2, na.rm. = TRUE), sd = sd(dlf$day2, na.rm = TRUE)), color = "blue", size = 1) +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day3, na.rm. = TRUE), sd = sd(dlf$day3, na.rm = TRUE)), color = "red", size = 1)
hist.day2
hist.day2
#Self-Test Page 171
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "Hygiene score on Day 2", y = "Density")
hist.day2
hist.day2 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day2, na.rm. = TRUE), sd = sd(dlf$day2, na.rm = TRUE)), color = "blue", size = 1) +
hist.day2 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day2, na.rm. = TRUE), sd = sd(dlf$day2, na.rm = TRUE)), color = "blue", size = 1)
hist.day2 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day2, na.rm. = TRUE), sd = sd(dlf$day2, na.rm = TRUE)), color = "black", size = 1)
#Self-Test Page 171
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "Hygiene score on Day 2", y = "Density")
hist.day2
hist.day2 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day2, na.rm. = TRUE), sd = sd(dlf$day2, na.rm = TRUE)), color = "black", size = 1)
hist.day3 <- ggplot(dlf, aes(day3)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "Hygiene score on Day 3", y = "Density")
hist.day3
hist.day3 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day3, na.rm. = TRUE), sd = sd(dlf$day3, na.rm = TRUE)), color = "black", size = 1)
?binwidth
?stat_bin
#Self-Test Page 171
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 10) +
labs(x = "Hygiene score on Day 2", y = "Density")
hist.day2 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day2, na.rm. = TRUE), sd = sd(dlf$day2, na.rm = TRUE)), color = "black", size = 1)
hist.day2
hist.day2
#Self-Test Page 171
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 1) +
labs(x = "Hygiene score on Day 2", y = "Density")
#Self-Test Page 171
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 30) +
labs(x = "Hygiene score on Day 2", y = "Density")
#Self-Test Page 171
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "Hygiene score on Day 2", y = "Density")
hist.day2
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 10) +
labs(x = "Hygiene score on Day 2", y = "Density")
hist.day2
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 40) +
labs(x = "Hygiene score on Day 2", y = "Density")
hist.day2
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 30) +
labs(x = "Hygiene score on Day 2", y = "Density")
hist.day2
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "Hygiene score on Day 2", y = "Density")
hist.day2
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 0.1) +
labs(x = "Hygiene score on Day 2", y = "Density")
hist.day2
hist.day2 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day2, na.rm. = TRUE), sd = sd(dlf$day2, na.rm = TRUE)), color = "black", size = 1)
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 0.05) +
labs(x = "Hygiene score on Day 2", y = "Density")
hist.day2
hist.day2 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day2, na.rm. = TRUE), sd = sd(dlf$day2, na.rm = TRUE)), color = "black", size = 1)
hist.day2 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day2, na.rm. = TRUE), sd = sd(dlf$day2, na.rm = TRUE)), color = "black", size = 1)
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 0.01) +
labs(x = "Hygiene score on Day 2", y = "Density")
hist.day2
hist.day2 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day2, na.rm. = TRUE), sd = sd(dlf$day2, na.rm = TRUE)), color = "black", size = 1)
hist.day3 <- ggplot(dlf, aes(day3)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 0.01) +
labs(x = "Hygiene score on Day 3", y = "Density")
hist.day3
hist.day3 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day3, na.rm. = TRUE), sd = sd(dlf$day3, na.rm = TRUE)), color = "black", size = 1, ?binwi )
rlang::last_error()`
rlang::last_error()
hist.day1 + stat_function(fun = dnorm, args = list(mean = mean(dlf$day1, na.rm = TRUE), sd = sd(dlf$day1, na.rm = TRUE)), colour = "black", size = 1)
hist.day2 + stat_function(fun = dnorm, args = list(mean = mean(dlf$day2, na.rm = TRUE), sd = sd(dlf$day2, na.rm = TRUE)), colour = "black", size = 1)
hist.day2 <- ggplot(dlf, aes(day2)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 0.01) +
labs(x = "Hygiene score on Day 2", y = "Density")
hist.day2
hist.day2 + stat_function(fun = dnorm, args = list(mean = mean(dlf$day2, na.rm = TRUE), sd = sd(dlf$day2, na.rm = TRUE)), color = "black", size = 1)
hist.day3 <- ggplot(dlf, aes(day3)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 0.01) +
labs(x = "Hygiene score on Day 3", y = "Density")
hist.day3
hist.day3 +
stat_function(fun = dnorm, args = list(mean = mean(dlf$day3, na.rm = TRUE), sd = sd(dlf$day3, na.rm = TRUE)), color = "black", size = 1)
qqplot.day1 <- qplot(sample = dlf$day1, stat = "qq")
qqplot.day1 <- qplot(sample = dlf$day1, stat("qq"))
qqplot.day1
qqplot.day1 <- qplot(sample = dlf$day1, stat"qq")
qqplot.day1
qqplot.day1 <- qplot(sample = dlf$day1, stat="qq")
qqplot.day1
qqplot.day1 <- qplot(sample = dlf$day1, stat="qq")
qqplot.day1
qqplot.day2 <- qplot(sample = dlf$day2, stat="qq")
qqplot.day2
qqplot.day3 <- qplot(sample = dlf$day3, stat="qq")
qqplot.day3
##5.5.2 Quantifying Normality with Numbers
describe(dlf$day1)
#or
stat.desc(dlf$day1, basic = FALSE, norm = TRUE)
stat.desc(dlf[, c("day1", "day2", "day3")], basic = FALSE, norm = TRUE)
##5.5.3 Exploring groups of Data
rexam <- read.deim("rexam.dat", header = TRUE)
setwd("C:/Users/Amy Richardson/Dropbox/VT - PhD/ENGE 5714 - Quant/GitHub/ENGE5714_Quant/Week 4")
##5.5.3 Exploring groups of Data
rexam <- read.deim("rexam.dat", header = TRUE)
##5.5.3 Exploring groups of Data
rexam <- read.delim("rexam.dat", header = TRUE)
View(rexam)
rexam$uni <- factor(rexam$uni, level = c(0:1), labels = c("Duncetown University", "Sussex University"))
#Self-Test Page 177
stat.desc(rexam[, c("exam", "computer", "mumeracy", "R")], basic = FALSE, norm = TRUE)
#Self-Test Page 177
stat.desc(rexam[, c("exam", "computer", "Numeracy", "R")], basic = FALSE, norm = TRUE)
#Self-Test Page 177
stat.desc(rexam[, c("exam", "computer", "numeracy", "R")], basic = FALSE, norm = TRUE)
#Self-Test Page 177
stat.desc(rexam[, c("exam", "computer", "numeracy", "lecture")], basic = FALSE, norm = TRUE)
#Self-Test Page 177
stat.desc(rexam[, c("exam", "computer", "numeracy", "lectures")], basic = FALSE, norm = TRUE)
hist.exam <- ggplot(rexam, aes(exam)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 0.01) +
labs(x = "1st Year R Exam Score", y = "Density")
hist.exam
hist.exam <- ggplot(rexam, aes(exam)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 0.05) +
labs(x = "1st Year R Exam Score", y = "Density")
hist.exam
hist.exam <- ggplot(rexam, aes(exam)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "1st Year R Exam Score", y = "Density")
hist.exam
hist.exam +
stat_function(fun = dnorm, args = list(mean = mean(rexam$exam, na.rm = TRUE), sd = sd(rexam$exam, na.rm = TRUE)), color = "black", size = 1)
#Self-Test Page 177
round(stat.desc(rexam[, c("exam", "computer", "numeracy", "lectures")], basic = FALSE, norm = TRUE), digits = 3
#Self-Test Page 177
round(stat.desc(rexam[, c("exam", "computer", "numeracy", "lectures")], basic = FALSE, norm = TRUE), digits = 3)
#Self-Test Page 177
round(stat.desc(rexam[, c("exam", "computer", "numeracy", "lectures")], basic = FALSE, norm = TRUE), digits = 3)
hist.computer <- ggplot(rexam, aes(computer)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "Measure of Computer Literacy", y = "Density")
hist.exam
hist.computer+
stat_function(fun = dnorm, args = list(mean = mean(rexam$computer, na.rm = TRUE), sd = sd(rexam$computer, na.rm = TRUE)), color = "black", size = 1)
hist.computer
hist.computer+
stat_function(fun = dnorm, args = list(mean = mean(rexam$computer, na.rm = TRUE), sd = sd(rexam$computer, na.rm = TRUE)), color = "black", size = 1)
hist.numeracy <- ggplot(rexam, aes(numeracy)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "Measure of Numerical Ability", y = "Density")
hist.numeracy
hist.numeracy +
stat_function(fun = dnorm, args = list(mean = mean(rexam$numeracy, na.rm = TRUE), sd = sd(rexam$numeracy, na.rm = TRUE)), color = "black", size = 1)
hist.lecture <- ggplot(rexam, aes(lecture)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "Percentage of Lectures Attended", y = "Density")
hist.lecture
hist.lecture +
stat_function(fun = dnorm, args = list(mean = mean(rexam$lecture, na.rm = TRUE), sd = sd(rexam$lecture, na.rm = TRUE)), color = "black", size = 1)
hist.lectures <- ggplot(rexam, aes(lectures)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "Percentage of Lectures Attended", y = "Density")
hist.lectures
hist.lectures +
stat_function(fun = dnorm, args = list(mean = mean(rexam$lectures, na.rm = TRUE), sd = sd(rexam$lectures, na.rm = TRUE)), color = "black", size = 1)
hist.lectures <- ggplot(rexam, aes(lectures)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 0.05) +
labs(x = "Percentage of Lectures Attended", y = "Density")
hist.lectures
hist.lectures +
stat_function(fun = dnorm, args = list(mean = mean(rexam$lectures, na.rm = TRUE), sd = sd(rexam$lectures, na.rm = TRUE)), color = "black", size = 1)
hist.lectures <- ggplot(rexam, aes(lectures)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 0.01) +
labs(x = "Percentage of Lectures Attended", y = "Density")
hist.lectures
hist.lectures +
stat_function(fun = dnorm, args = list(mean = mean(rexam$lectures, na.rm = TRUE), sd = sd(rexam$lectures, na.rm = TRUE)), color = "black", size = 1)
hist.lectures <- ggplot(rexam, aes(lectures)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 0.1) +
labs(x = "Percentage of Lectures Attended", y = "Density")
hist.lectures
hist.lectures +
stat_function(fun = dnorm, args = list(mean = mean(rexam$lectures, na.rm = TRUE), sd = sd(rexam$lectures, na.rm = TRUE)), color = "black", size = 1)
hist.lectures <- ggplot(rexam, aes(lectures)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 1) +
labs(x = "Percentage of Lectures Attended", y = "Density")
hist.lectures
hist.lectures +
stat_function(fun = dnorm, args = list(mean = mean(rexam$lectures, na.rm = TRUE), sd = sd(rexam$lectures, na.rm = TRUE)), color = "black", size = 1)
round(stat.desc(rexam[, c("exam", "computer", "numeracy", "lectures")], basic = FALSE, norm = TRUE), digits = 3)
hist.exam <- ggplot(rexam, aes(exam)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "1st Year R Exam Score", y = "Density")
hist.exam
hist.exam +
stat_function(fun = dnorm, args = list(mean = mean(rexam$exam, na.rm = TRUE), sd = sd(rexam$exam, na.rm = TRUE)), color = "black", size = 1)
hist.computer <- ggplot(rexam, aes(computer)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "Measure of Computer Literacy", y = "Density")
hist.computer
hist.computer+
stat_function(fun = dnorm, args = list(mean = mean(rexam$computer, na.rm = TRUE), sd = sd(rexam$computer, na.rm = TRUE)), color = "black", size = 1)
hist.lectures <- ggplot(rexam, aes(lectures)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white", binwidth = 1) +
labs(x = "Percentage of Lectures Attended", y = "Density")
hist.lectures
hist.lectures +
stat_function(fun = dnorm, args = list(mean = mean(rexam$lectures, na.rm = TRUE), sd = sd(rexam$lectures, na.rm = TRUE)), color = "black", size = 1)
hist.numeracy <- ggplot(rexam, aes(numeracy)) + theme(legend.position = "none")+
geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
labs(x = "Measure of Numerical Ability", y = "Density")
hist.numeracy
hist.numeracy +
stat_function(fun = dnorm, args = list(mean = mean(rexam$numeracy, na.rm = TRUE), sd = sd(rexam$numeracy, na.rm = TRUE)), color = "black", size = 1)
by(data = rexam$exa, INDICES = rexam$uni, FUN = describe)
by(data = rexam$exa, INDICES = rexam$uni, FUN = stat.desc)
by(rexam[, c("exam", "numeracy")], rexam$uni, stat.desc, basic = FALSE, norm = TRUE)
by(rexam[, c("exam", "numeracy")], rexam$uni, stat.desc, basic = FALSE, norm = TRUE)
dunceData<-subset(rexam, rexam$uni=="Duncetown University")
sussexData<-subset(rexam, rexam$uni=="Sussex University")
hist.numeracy.duncetown <- ggplot(dunceData, aes(numeracy)) + theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), fill = "white", colour = "black", binwidth = 1) +
labs(x = "Numeracy Score", y = "Density") +
stat_function(fun=dnorm, args=list(mean = mean(dunceData$numeracy, na.rm = TRUE), sd = sd(dunceData$numeracy, na.rm = TRUE)), colour = "red", size=1)
hist.numeracy.duncetown
ggsave(file = paste(imageDirectory,"05 dunce numeracy Hist.png",sep="/"))
hist.exam.duncetown <- ggplot(dunceData, aes(exam)) + theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), fill = "white", colour = "black") +
labs(x = "First Year Exam Score", y = "Density") +
stat_function(fun=dnorm, args=list(mean = mean(dunceData$exam, na.rm = TRUE), sd = sd(dunceData$exam, na.rm = TRUE)), colour = "red", size=1)
hist.exam.duncetown
ggsave(file = paste(imageDirectory,"05 dunce exam Hist.png",sep="/"))
hist.numeracy.sussex <- ggplot(sussexData, aes(numeracy)) + theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), fill = "white", colour = "black", binwidth = 1) +
labs(x = "Numeracy Score", y = "Density") +
stat_function(fun=dnorm, args=list(mean = mean(sussexData $numeracy, na.rm = TRUE), sd = sd(sussexData $numeracy, na.rm = TRUE)), colour = "red", size=1)
hist.numeracy.sussex
ggsave(file = paste(imageDirectory,"05 sussex numeracy Hist.png",sep="/"))
hist.exam.sussex <- ggplot(sussexData, aes(exam)) + theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), fill = "white", colour = "black") +
labs(x = "First Year Exam Score", y = "Density") +
stat_function(fun=dnorm, args=list(mean = mean(sussexData$exam, na.rm = TRUE), sd = sd(sussexData$exam, na.rm = TRUE)), colour = "red", size=1)
hist.exam.sussex
ggsave(file = paste(imageDirectory,"05 sussex exam Hist.png",sep="/"))
dunceData<-subset(rexam, rexam$uni=="Duncetown University")
sussexData<-subset(rexam, rexam$uni=="Sussex University")
hist.numeracy.duncetown <- ggplot(dunceData, aes(numeracy)) + theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), fill = "white", colour = "black", binwidth = 1) +
labs(x = "Numeracy Score", y = "Density") +
stat_function(fun=dnorm, args=list(mean = mean(dunceData$numeracy, na.rm = TRUE), sd = sd(dunceData$numeracy, na.rm = TRUE)), colour = "red", size=1)
hist.numeracy.duncetown
ggsave(file = paste(imageDirectory,"05 dunce numeracy Hist.png",sep="/"))
hist.exam.duncetown <- ggplot(dunceData, aes(exam)) + theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), fill = "white", colour = "black") +
labs(x = "First Year Exam Score", y = "Density") +
stat_function(fun=dnorm, args=list(mean = mean(dunceData$exam, na.rm = TRUE), sd = sd(dunceData$exam, na.rm = TRUE)), colour = "red", size=1)
hist.exam.duncetown
ggsave(file = paste(imageDirectory,"05 dunce exam Hist.png",sep="/"))
hist.numeracy.sussex <- ggplot(sussexData, aes(numeracy)) + theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), fill = "white", colour = "black", binwidth = 1) +
labs(x = "Numeracy Score", y = "Density") +
stat_function(fun=dnorm, args=list(mean = mean(sussexData $numeracy, na.rm = TRUE), sd = sd(sussexData $numeracy, na.rm = TRUE)), colour = "blue", size=1)
hist.numeracy.sussex
ggsave(file = paste(imageDirectory,"05 sussex numeracy Hist.png",sep="/"))
hist.exam.sussex <- ggplot(sussexData, aes(exam)) + theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), fill = "white", colour = "black") +
labs(x = "First Year Exam Score", y = "Density") +
stat_function(fun=dnorm, args=list(mean = mean(sussexData$exam, na.rm = TRUE), sd = sd(sussexData$exam, na.rm = TRUE)), colour = "blue", size=1)
hist.exam.sussex
ggsave(file = paste(imageDirectory,"05 sussex exam Hist.png",sep="/"))
hist.computer.duncetown <- ggplot(dunceData, aes(computer)) + theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), fill = "white", colour = "black", binwidth = 1) +
labs(x = "Computer Score", y = "Density") +
stat_function(fun=dnorm, args=list(mean = mean(dunceData$computer, na.rm = TRUE), sd = sd(dunceData$computer, na.rm = TRUE)), colour = "red", size=1)
hist.computer.duncetown
ggsave(file = paste(imageDirectory,"05 dunce computer Hist.png",sep="/"))
hist.lectures.duncetown <- ggplot(dunceData, aes(lectures)) + theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), fill = "white", colour = "black") +
labs(x = "Lecture Attendance", y = "Density") +
stat_function(fun=dnorm, args=list(mean = mean(dunceData$lectures, na.rm = TRUE), sd = sd(dunceData$lectures, na.rm = TRUE)), colour = "red", size=1)
hist.lectures.duncetown
ggsave(file = paste(imageDirectory,"05 dunce lectures Hist.png",sep="/"))
hist.computer.sussex <- ggplot(sussexData, aes(computer)) + theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), fill = "white", colour = "black", binwidth = 1) +
labs(x = "ComputerScore", y = "Density") +
stat_function(fun=dnorm, args=list(mean = mean(sussexData$computer, na.rm = TRUE), sd = sd(sussexData$computer, na.rm = TRUE)), colour = "blue", size=1)
hist.computer.sussex
ggsave(file = paste(imageDirectory,"05 sussex computer Hist.png",sep="/"))
hist.lectures.sussex <- ggplot(sussexData, aes(lectures)) + theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), fill = "white", colour = "black") +
labs(x = "Lecture Attendance", y = "Density") +
stat_function(fun=dnorm, args=list(mean = mean(sussexData$lectures, na.rm = TRUE), sd = sd(sussexData$lectures, na.rm = TRUE)), colour = "blue", size=1)
hist.lectures.sussex
ggsave(file = paste(imageDirectory,"05 sussex lectures Hist.png",sep="/"))
#5.6 Testing whether a distribution is Normal.
## Shapiro-Wilk
shapiro.test(rexam$exam)
shapiro.test(rexam$numeracy)
##  Break up by instittuion to compare Shapiro-Wilk scores
by(rexam$exam, rexam$uni, shapiro.test)
by(rexam$numeracy, rexam$uni, shapiro.test)
##drow Q-Qplots for each variable
qplot(sample = rexam$exam, stat = "qq")
qplot(sample = rexam$numeracy, stat = "qq")
Rcmdr
Rcmdr::
?rcmdr
Rcmdr
